#!/bin/env node
'use strict';
var packageJson = require('./package');
var deps = packageJson.deps;
module.exports = [
    function provision(ensure, options) {
        ensure
            .message('eslint/strict dependencies are installed')
            .use(require('holst-npm'));

        ensure.npm
            .has.devDependency('eslint', deps.eslint)
            .and.devDependency('eslint-config-strict', '^' + packageJson.version)
            .and.devDependency('eslint-plugin-filenames', deps['eslint-plugin-filenames'])
            .and.devDependency('eslint-plugin-one-variable-per-var', deps['eslint-plugin-one-variable-per-var']);

        if (options.style === 'react') {
            ensure.npm
                .has.devDependency('eslint-plugin-react', deps['eslint-plugin-react']);
        }
    },

    function provision(ensure) {
        ensure
            .message('eslint is set up to run on `npm test`')
            .use(require('holst-npm'));

        ensure.npm
            .has.script('lint', 'eslint $npm_package_config_lint_opts .')
            .and.config('lint_opts', '--ignore-path .gitignore')
            .and.script('test')
                .startsWith('npm run lint && ')
                .or.equals('npm run lint');
    },

    function provision(ensure, options) {
        var style = options.style || 'es6';
        ensure.message('ensure eslintConfig extends from strict/' + style);

        if (options.useRC) {
            ensure.file('.eslintrc')
                .has.json.property('extends', 'strict/' + style);
        } else {
            ensure.file('.eslintrc').does.not.exist()
                .and.file('package.json')
                    .has.json.property('eslintConfig')
                        .with.property('extends', 'strict/' + style);
        }
    },

];

if (require.main === module) {
    require('holst')(module.exports);
}
